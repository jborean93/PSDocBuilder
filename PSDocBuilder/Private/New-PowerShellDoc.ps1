# Copyright: (c) 2019, Jordan Borean (@jborean93) <jborean93@gmail.com>
# MIT License (see LICENSE or https://opensource.org/licenses/MIT)

Function New-PowerShellDoc {
    <#
    ---
    synopsis: Generate a PowerShell cmdlet doc string.
    description:
    - Generate a PowerShell doc string that fits the standard for a PowerShell cmdlet. This takes in the metadata as
      parsed by `PSDocHelper`.
    parameters:
    - name: Documentation
      description:
      - A hashtable that contains the cmdlet/function metadata which is translated into the PowerShell doc. This
        hashtable is generated by `PSDocHelper`.
    - name: Indent
      description:
      - The number of spaces to indent the doc string by.
    examples:
    - name: Generate PowerShell doc string.
      description:
      - Generate the PowerShell function doc string based on the path to the cmdlet.
      code: |-
        $cmdlet = Get-CmdletFromPath -Path C:\ps_cmdlet.ps1
        $cmdlet_doc = Get-CmdletDocumentation -Cmdlet $cmdlet
        $cmdlet_meta = Get-CmdletMetadata -Cmdlet $cmdlet -Documenation $cmdlet_doc
        $ps_doc = New-PowerShellDoc -Documentation $cmdlet_meta
    outputs:
    - description:
      - The PowerShell doc string generated from the metadata.
    #>
    [CmdletBinding(SupportsShouldProcess=$false)]
    [OutputType([System.String])]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute(
        'PSUseShouldProcessForStateChangingFunctions', '',
        Justification='Not affecting system state, just outputting a string.'
    )]
    Param (
        [Parameter(Mandatory=$true)]
        [Hashtable]
        $Documentation,

        [System.Int32]
        $Indent = 4
    )

    $nl = [System.Environment]::NewLine
    $space_indent = " " * $Indent
    $format_params = @{
        Indent = $Indent
        MaxLength = 120
    }

    $synopsis = $Documentation.synopsis | Format-IndentAndWrapping @format_params
    $description = $Documentation.description | Format-IndentAndWrapping @format_params

    $doc_string = @"
$space_indent.SYNOPSIS
$synopsis

$space_indent.DESCRIPTION
$description
"@

    foreach ($parameter in $Documentation.parameters) {
        $parameter_description = $parameter.description | Format-IndentAndWrapping @format_params
        $doc_string += (
            "{0}{0}{1}.PARAMETER {2}{0}{1}[{3}]{0}{4}" -f
            ($nl, $space_indent, $parameter.name, $parameter.type, $parameter_description)
        )
    }

    foreach ($example in $Documentation.examples) {
        $example_description = $example.description | Format-IndentAndWrapping @format_params
        $code = $example.code | Format-IndentAndWrapping -Indent ($Indent * 2)
        $doc_string += (
            "{0}{0}{1}.EXAMPLE {2}{0}{3}{0}{0}{4}" -f
            ($nl, $space_indent, $example.name, $example_description, $code)
        )
    }

    foreach ($doc_input in $Documentation.inputs) {
        $input_description = $doc_input.description | Format-IndentAndWrapping @format_params
        $doc_string += (
            "{0}{0}{1}.INPUTS{0}{1}[{2}]`${3} - {4}{0}{5}" -f
            ($nl, $space_indent, $doc_input.type, $doc_input.name,
            ($doc_input.pipeline_types -join ", "), $input_description)
        )
    }

    foreach ($output in $Documentation.outputs) {
        $output_description = $output.description | Format-IndentAndWrapping @format_params

        $struct_lines = [System.Collections.Generic.List`1[System.String]]@()
        foreach ($struct_entry in $output.structure) {
            $prop_name = $struct_entry.name | Format-IndentAndWrapping @format_params
            $prop_description = $struct_entry.description | Format-IndentAndWrapping -Indent ($format_params.Indent + 4) -MaxLength $format_params.MaxLength

            $prop_type = ""
            if (-not [System.String]::IsNullOrEmpty($struct_entry.type)) {
                $prop_type = " - [{0}]" -f $struct_entry.type
            }

            $struct_lines.Add("{0}{1}{2}{3}" -f ($prop_name, $prop_type, $nl, $prop_description))
        }

        $output_structure = ""
        if ($struct_lines.Count -gt 0) {
            $output_structure = "{0}{0}{1}Contains:{0}{2}" -f ($nl, $space_indent, ($struct_lines -join $nl))
        }

        $doc_string += (
            "{0}{0}{1}.OUTPUTS{0}{1}([{2}]) - Parameter Sets: {3}{0}{4}{5}" -f
            ($nl, $space_indent, ($output.types -join "], ["), ($output.parameter_sets -join ", "), $output_description, $output_structure)
        )
    }

    if ($Documentation.notes.Count -gt 0) {
        $note = $Documentation.notes | Format-IndentAndWrapping @format_params
        $doc_string += ("{0}{0}{1}.NOTES{0}{2}" -f ($nl, $space_indent, $note))
    }

    foreach ($link in $Documentation.links) {
        $link_link = $link.link | Format-IndentAndWrapping -Indent $format_params.Indent
        $link_text = ''
        if (-not [System.String]::IsNullOrEmpty($link.text)) {
            $link_text = ("# $($link.text)" | Format-IndentAndWrapping -Indent $format_params.Indent) + $nl
        }
        $doc_string += ("{0}{0}{1}.LINK{0}{2}{3}" -f ($nl, $space_indent, $link_text, $link_link))
    }

    # Replace instances of C(cmdlet name) for PowerShell docs.
    $doc_string = [System.Text.RegularExpressions.Regex]::Replace(
        $doc_string, 'C\(([\w-]*)\)', '''$1'''
    )

    # Return the string with comments and proper indents.
    return $doc_string
}